using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace GameDevKit.Editor.CodeGenerator
{
    public class ClassConfig
    {
        public readonly string fileName;
        public string filePathFromAssetsFolder = "";
        public bool allowTab = false;
        public int tabToSpace = 4;
        public bool addAutoGeneratedInfo = true;

        public ClassConfig(string fileName)
        {
            this.fileName = fileName + (fileName.EndsWith(".cs") ? "" : ".cs");
        }
    }

    public class ClassGenerator
    {
        private readonly StringBuilder _builder = new();
        private readonly ClassConfig _config;

        public readonly List<string> UsingNamespaces = new();

        private int _indent;

        public ClassGenerator(string fileName, string filePathFromAssetsFolder = "") : this(new(fileName) { filePathFromAssetsFolder = filePathFromAssetsFolder }) { }

        public ClassGenerator(ClassConfig config)
        {
            _config = config;
        }

        public void Generate()
        {
            if (UsingNamespaces.Count > 0)
            {
                var usingInfo = UsingNamespaces.Select(ns => $"using {ns};").JoinToString("\n");
                _builder.Insert(0, usingInfo + "\n\n");
            }

            if (_config.addAutoGeneratedInfo)
            {
                var stackTrace = new System.Diagnostics.StackTrace(true);

                var thisFilePath = stackTrace.GetFrame(0).GetFileName();
                thisFilePath = thisFilePath.Substring(thisFilePath.IndexOf("Assets/"));
                var callerPath = stackTrace.GetFrame(1).GetFileName();
                callerPath = callerPath.Substring(callerPath.IndexOf("Assets/"));
                _builder.Insert(0, $"// Auto-generated using {thisFilePath}\n// Generated by {callerPath}\n\n");
            }

            if (!_config.allowTab)
            {
                ConvertTabToSpace();
            }

            var filePath = Path.Combine(Application.dataPath, _config.filePathFromAssetsFolder, _config.fileName);

            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            File.WriteAllText(filePath, _builder.ToString());

            AssetDatabase.Refresh();
        }

        public ClassGenerator AddText(string text)
        {
            _builder.Append(text);
            return this;
        }

        public ClassGenerator AddLine(string line = "")
        {
            if (line.IsNullOrEmpty())
            {
                _builder.Append('\n');
                return this;
            }

            if (line.Contains("}")) _indent--;

            var tabCount = 0;

            foreach (var c in line)
            {
                if (c == '\t')
                {
                    tabCount++;
                    continue;
                }

                break;
            }

            for (var i = 0; i < _indent - tabCount; i++)
            {
                _builder.Append("\t");
            }

            _builder.Append($"{line}\n");

            if (line.Contains("{")) _indent++;
            return this;
        }

        private void ConvertTabToSpace()
        {
            _builder.Replace("\t", new string(' ', _config.tabToSpace));
        }
    }
}
